import streamlit as st
import requests
import pandas as pd
import time
import io

# -------------------
# –ö–æ–Ω—Ñ–∏–≥
# -------------------
API_URL = "https://api.wordstat.yandex.net/v1/topRequests"
TOKEN = "—Å—é–¥–∞ –≤–∞—à —Ç–æ–∫–µ–Ω"
NUM_PHRASES = 2000

st.set_page_config(page_title="Yandex Wordstat Parser", layout="wide")
st.title("üîç –ü–∞—Ä—Å–µ—Ä Yandex Wordstat API")

# -------------------
# –§—É–Ω–∫—Ü–∏—è API-–∑–∞–ø—Ä–æ—Å–∞
# -------------------
def fetch_wordstat(phrase, region, token, no_region=False):
    headers = {
        "Authorization": f"Bearer {token}",
        "Accept-Language": "ru",
        "Content-Type": "application/json; charset=utf-8"
    }
    body = {"phrase": phrase, "numPhrases": NUM_PHRASES}
    if not no_region:
        body["regions"] = [int(region)]
    try:
        resp = requests.post(API_URL, headers=headers, json=body, timeout=30)
        if resp.status_code != 200:
            return []
        data = resp.json()
        return data.get("topRequests", [])
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞: {e}")
        return []

# -------------------
# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Ç–∞–±–ª–∏—Ü—ã –∏ –∫–Ω–æ–ø–æ–∫ (–≤—Å–µ–≥–¥–∞ –æ–¥–Ω–∞)
# -------------------
def render_results(df: pd.DataFrame):
    st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    st.dataframe(df, use_container_width=True)

    col1, col2 = st.columns(2)
    # CSV
    csv_data = df.to_csv(index=False).encode("utf-8")
    with col1:
        st.download_button(
            "üì• –°–∫–∞—á–∞—Ç—å CSV",
            csv_data,
            file_name="wordstat.csv",
            mime="text/csv",
            key="csv_btn"
        )
    # Excel
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine="openpyxl") as writer:
        df.to_excel(writer, index=False, sheet_name="Wordstat")
    with col2:
        st.download_button(
            "üìä –°–∫–∞—á–∞—Ç—å Excel",
            output.getvalue(),
            file_name="wordstat.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            key="excel_btn"
        )

# -------------------
# UI
# -------------------
col1, col2 = st.columns([2, 1])
with col1:
    phrase = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å", "—Ñ—Ä–∞–∑–∞").strip()
    no_region = st.checkbox("–ü–∞—Ä—Å–∏–Ω–≥ –±–µ–∑ —Ä–µ–≥–∏–æ–Ω–∞", value=False)
with col2:
    region = st.number_input("ID —Ä–µ–≥–∏–æ–Ω–∞", value=225, step=1, disabled=no_region)

max_requests = st.number_input("–ú–∞–∫—Å–∏–º—É–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (N). –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ 1000 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å—É—Ç–∫–∏", value=5, step=1, min_value=1)
start_btn = st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥")

# -------------------
# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
# -------------------
if start_btn:
    results = {}
    query_queue = []

    progress = st.progress(0)
    status = st.empty()

    start_time = time.time()

    # --- –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å
    first = fetch_wordstat(phrase, region, TOKEN, no_region=no_region)
    for item in first:
        p = item["phrase"]
        c = item["count"]
        results[p] = c
        query_queue.append(p)

    # --- –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    done_requests = 0
    while done_requests < max_requests and query_queue:
        current = query_queue.pop(0)
        wordstat = fetch_wordstat(current, region, TOKEN, no_region=no_region)
        done_requests += 1

        for item in wordstat:
            p = item["phrase"]
            c = item["count"]
            if p not in results:
                results[p] = c
                query_queue.append(p)

        elapsed = time.time() - start_time
        avg_time = elapsed / done_requests
        eta = avg_time * (max_requests - done_requests)

        progress.progress(done_requests / max_requests)
        status.text(f"–ó–∞–ø—Ä–æ—Å {done_requests}/{max_requests} | –û—Å—Ç–∞–ª–æ—Å—å ~ {eta:.1f} —Å–µ–∫")

        time.sleep(1)

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–µ—Å—Å–∏—é
    df = pd.DataFrame([{"–§—Ä–∞–∑–∞": k, "–ü–æ–∫–∞–∑—ã": v} for k, v in results.items()])
    df = df.sort_values("–ü–æ–∫–∞–∑—ã", ascending=False).reset_index(drop=True)
    st.session_state["df"] = df
    st.session_state["last_phrase"] = phrase
    st.success(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –°–æ–±—Ä–∞–Ω–æ {len(results)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ—Ä–∞–∑.")

# -------------------
# –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã (–≤—Å–µ–≥–¥–∞ –æ–¥–Ω–∞, –∏–∑ —Å–µ—Å—Å–∏–∏)
# -------------------
if "df" in st.session_state and not st.session_state["df"].empty:
    render_results(st.session_state["df"])
