import streamlit as st
import requests
import pandas as pd
import time
import io
import sqlite3
import os
import re

# -------------------
# –ö–æ–Ω—Ñ–∏–≥
# -------------------
API_URL = "https://api.wordstat.yandex.net/v1/topRequests"
USER_INFO_URL = "https://api.wordstat.yandex.net/v1/userInfo"
TOKEN = "—Ç—É—Ç –≤–∞—à –∞–ø–∏ –∫–æ–¥"  # –í–ù–ò–ú–ê–ù–ò–ï: —ç—Ç–æ –ø—É–±–ª–∏—á–Ω—ã–π —Ç–æ–∫–µ–Ω, –∑–∞–º–µ–Ω–∏—Ç–µ –µ–≥–æ
NUM_PHRASES = 2000
MAX_ERRORS = 3  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ API

st.set_page_config(page_title="Yandex Wordstat Parser", layout="wide")
st.title("üîç –ü–∞—Ä—Å–µ—Ä Yandex Wordstat API —Å SQLite ")


# -------------------
# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å API
# -------------------
# -------------------
# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å API
# -------------------
# -------------------
# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å API
# -------------------
def fetch_user_info(token):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–æ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤—ã–ø–æ–ª–Ω—è—è –¢–û–õ–¨–ö–û POST-–∑–∞–ø—Ä–æ—Å,
    –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ —Ä–∞–±–æ—á–∏–π.
    """
    # URL –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞ —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ: USER_INFO_URL
    # (USER_INFO_URL = "https://api.wordstat.yandex.net/v1/userInfo")

    headers = {
        "Authorization": f"Bearer {token}",
        "Accept-Language": "ru",
    }

    if not token:
        st.error("–¢–æ–∫–µ–Ω API –ø—É—Å—Ç.")
        return None

    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å—Ä–∞–∑—É POST-–∑–∞–ø—Ä–æ—Å
        resp = requests.post(USER_INFO_URL, headers=headers, timeout=10)

        if resp.status_code == 200:
            data = resp.json()
            return data.get("userInfo", {}).get("dailyLimitRemaining")
        else:
            # –í—ã–≤–æ–¥–∏–º –∫–æ–¥ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ POST –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–≤–æ—Ç–µ. –ö–æ–¥: {resp.status_code}.")
            return None

    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ /v1/userInfo: {e}")
        return None


def fetch_wordstat(phrase, region, token, no_region=False):
    # URL –¥–ª—è —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞ —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ: API_URL
    # (API_URL = "https://api.wordstat.yandex.net/v1/topRequests")

    headers = {
        "Authorization": f"Bearer {token}",
        "Accept-Language": "ru",
        "Content-Type": "application/json; charset=utf-8"
    }
    body = {"phrase": phrase, "numPhrases": NUM_PHRASES}  # NUM_PHRASES –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–æ–Ω—Ñ–∏–≥–µ
    if not no_region:
        body["regions"] = [int(region)]
    try:
        resp = requests.post(API_URL, headers=headers, json=body, timeout=30)
        if resp.status_code != 200:
            st.warning(f"–û—à–∏–±–∫–∞ API –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{phrase}': –ö–æ–¥ {resp.status_code}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            return []
        data = resp.json()
        return data.get("topRequests", [])
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ '{phrase}': {e}")
        return []





def fetch_wordstat(phrase, region, token, no_region=False):
    headers = {
        "Authorization": f"Bearer {token}",
        "Accept-Language": "ru",
        "Content-Type": "application/json; charset=utf-8"
    }
    body = {"phrase": phrase, "numPhrases": NUM_PHRASES}
    if not no_region:
        body["regions"] = [int(region)]
    try:
        resp = requests.post(API_URL, headers=headers, json=body, timeout=30)
        # 429 Too Many Requests, 503 Service Unavailable –∏ –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
        if resp.status_code != 200:
            st.warning(f"–û—à–∏–±–∫–∞ API –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{phrase}': –ö–æ–¥ {resp.status_code}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.")
            return []
        data = resp.json()
        return data.get("topRequests", [])
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ '{phrase}': {e}")
        return []


# -------------------
# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å SQLite
# -------------------
def sanitize_filename(phrase):
    """–û—á–∏—â–∞–µ—Ç —Ñ—Ä–∞–∑—É –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞."""
    phrase = re.sub(r'[\\/:*?"<>|]', '', phrase)
    return phrase.strip().replace(' ', '_')[:50] + ".db"


def setup_db(db_name):
    """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ –ë–î –∏ —Å–æ–∑–¥–∞–µ—Ç –¥–≤–µ —Ç–∞–±–ª–∏—Ü—ã: results –∏ queue."""
    conn = sqlite3.connect(db_name)
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS results (
            phrase TEXT PRIMARY KEY,
            count INTEGER
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS queue (
            phrase TEXT PRIMARY KEY,
            status TEXT DEFAULT 'PENDING' 
        )
    """)
    cursor.execute("CREATE INDEX IF NOT EXISTS idx_status_queue ON queue (status)")
    conn.commit()
    return conn


def insert_result_and_queue(conn, phrase, count, is_processed=False):
    """–í—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—Ä–∞–∑—É –≤ results –∏ –≤ queue."""
    conn.execute("INSERT OR IGNORE INTO results (phrase, count) VALUES (?, ?)", (phrase, count))
    status = 'PROCESSED' if is_processed else 'PENDING'
    conn.execute("INSERT OR IGNORE INTO queue (phrase, status) VALUES (?, ?)", (phrase, status))


def update_queue_status(conn, phrase, status='PROCESSED'):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ñ—Ä–∞–∑—ã –≤ —Ç–∞–±–ª–∏—Ü–µ queue."""
    conn.execute("UPDATE queue SET status = ? WHERE phrase = ?", (status, phrase))


def get_all_results_df(conn):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –ë–î –≤ DataFrame."""
    return pd.read_sql_query("SELECT phrase AS –§—Ä–∞–∑–∞, count AS –ü–æ–∫–∞–∑—ã FROM results ORDER BY –ü–æ–∫–∞–∑—ã DESC", conn)


def get_db_phrase_count(conn):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ—Ä–∞–∑ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã results."""
    cursor = conn.cursor()
    cursor.execute("SELECT COUNT(phrase) FROM results")
    return cursor.fetchone()[0]


# -------------------
# –§—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∞ —Ç–∞–±–ª–∏—Ü—ã –∏ –∫–Ω–æ–ø–æ–∫ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
# -------------------
def render_results(df: pd.DataFrame, db_name: str):
    st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã")
    st.dataframe(df, use_container_width=True)

    col1, col2, col3 = st.columns(3)

    csv_data = df.to_csv(index=False).encode("utf-8")
    with col1:
        st.download_button(
            "üì• –°–∫–∞—á–∞—Ç—å CSV",
            csv_data,
            file_name=f"{db_name.replace('.db', '')}.csv",
            mime="text/csv",
            key="csv_btn"
        )
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine="openpyxl") as writer:
        df.to_excel(writer, index=False, sheet_name="Wordstat")
    with col2:
        st.download_button(
            "üìä –°–∫–∞—á–∞—Ç—å Excel",
            output.getvalue(),
            file_name=f"{db_name.replace('.db', '')}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            key="excel_btn"
        )
    with col3:
        if os.path.exists(db_name):
            with open(db_name, "rb") as f:
                db_bytes = f.read()
            st.download_button(
                "üíæ –°–∫–∞—á–∞—Ç—å SQLite DB",
                db_bytes,
                file_name=db_name,
                mime="application/octet-stream",
                key="sqlite_btn"
            )
        else:
            st.info("–§–∞–π–ª –ë–î –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.")


# -------------------
# UI –∏ –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
# -------------------

# --- üÜï –í—ã–≤–æ–¥ –æ—Å—Ç–∞–≤—à–µ–π—Å—è –∫–≤–æ—Ç—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —á–∞—Å—Ç–∏ UI
remaining_quota = fetch_user_info(TOKEN)

# --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–∞—Ä—Å–∏–Ω–≥–∞
col1, col2, col3 = st.columns([3, 1, 1])
with col1:
    phrase = st.text_input("–í–≤–µ–¥–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å", "—Ñ—Ä–∞–∑–∞").strip()
    no_region = st.checkbox("–ü–∞—Ä—Å–∏–Ω–≥ –±–µ–∑ —Ä–µ–≥–∏–æ–Ω–∞", value=False)
with col2:
    region = st.number_input("ID —Ä–µ–≥–∏–æ–Ω–∞", value=225, step=1, disabled=no_region)
with col3:
    # 2. –°–æ–∑–¥–∞–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    quota_placeholder = st.empty()
    if remaining_quota is None:
        quota_placeholder.info("–ö–≤–æ—Ç–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞")
    else:
        # 3. –í—ã–≤–æ–¥–∏–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        quota_placeholder.metric(label="–û—Å—Ç–∞—Ç–æ–∫ –¥–Ω–µ–≤–Ω–æ–π –∫–≤–æ—Ç—ã", value=f"{remaining_quota} –∑–∞–ø—Ä–æ—Å–æ–≤")


max_requests = st.number_input("–ú–∞–∫—Å–∏–º—É–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (N).", value=5, step=1, min_value=1)
st.caption(f"–õ–∏–º–∏—Ç –∫–≤–æ—Ç—ã —Å–±—Ä–æ—Å–∏—Ç—Å—è –≤ –ø–æ–ª–Ω–æ—á—å –ø–æ –ú–°–ö. –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ {MAX_ERRORS} –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫.")

# --- –õ–æ–≥–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏
if "current_db" in st.session_state and os.path.exists(st.session_state["current_db"]):
    if st.button(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ë–î: {st.session_state['current_db']}"):
        os.remove(st.session_state["current_db"])
        del st.session_state["current_db"]
        if "df" in st.session_state:
            del st.session_state["df"]
        st.success("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥.")
        st.rerun()

start_btn = st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥")

# --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
if start_btn:
    if not phrase:
        st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å.")
        st.stop()

    # 1. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –ë–î –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    db_name = sanitize_filename(phrase)
    st.session_state["current_db"] = db_name
    conn = setup_db(db_name)

    # 2. –ó–∞–≥—Ä—É–∑–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –∏–∑ –ë–î..."):
        query_queue = pd.read_sql_query("SELECT phrase FROM queue WHERE status = 'PENDING'", conn)['phrase'].tolist()
        queue_set = set(query_queue)

    progress = st.progress(0)
    status = st.empty()
    start_time = time.time()
    total_phrases = get_db_phrase_count(conn)
    consecutive_errors = 0

    # --- –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞)
    # --- –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å (–µ—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞)
    if not query_queue:

        current_phrase = phrase

        first = fetch_wordstat(current_phrase, region, TOKEN, no_region=no_region)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å—Ä–∞–∑—É –æ—à–∏–±–æ—á–µ–Ω (429/503), –Ω–µ –Ω–∞—á–∏–Ω–∞–µ–º
        if not first:
            st.error("‚ùå –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –æ—à–∏–±–∫–æ–π. –ü–∞—Ä—Å–∏–Ω–≥ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞—á–∞—Ç.")
            conn.close()
            st.stop()

        # 1. –ü–æ–ª—É—á–∞–µ–º —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–π —Ñ—Ä–∞–∑—ã (–æ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–≤–æ–π –≤ –º–∞—Å—Å–∏–≤–µ)
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —ç–ª–µ–º–µ–Ω—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—É—é —Ñ—Ä–∞–∑—É
        initial_phrase_count = first[0].get('count', 0) if first and first[0].get('phrase') == current_phrase else 0

        # 2. –í—Å—Ç–∞–≤–ª—è–µ–º –ò–°–•–û–î–ù–£–Æ —Ñ—Ä–∞–∑—É —Å –µ–µ —á–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å—é –∏ —Å—Ä–∞–∑—É —Å—Ç–∞–≤–∏–º —Å—Ç–∞—Ç—É—Å 'PROCESSED'.
        insert_result_and_queue(conn, current_phrase, initial_phrase_count, is_processed=True)

        # 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –í–°–ï 2000 —Ñ—Ä–∞–∑. INSERT OR IGNORE –ø–æ–∑–∞–±–æ—Ç–∏—Ç—Å—è –æ –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏.
        for item in first:
            p = item["phrase"]
            c = item["count"]

            # –í—Å—Ç–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º –≤ results, –∏ –¥–æ–±–∞–≤–ª—è–µ–º PENDING –≤ queue (–∫—Ä–æ–º–µ —É–∂–µ PROCESSED)
            insert_result_and_queue(conn, p, c, is_processed=False)

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—É—é –æ—á–µ—Ä–µ–¥—å —Ç–æ–ª—å–∫–æ PENDING
            if p not in queue_set:
                query_queue.append(p)
                queue_set.add(p)

        conn.commit()
        total_phrases = get_db_phrase_count(conn)
    else:
        st.info(f"–í–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞. –û—á–µ—Ä–µ–¥—å: {len(query_queue)} —Ñ—Ä–∞–∑.")

    # --- –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    done_requests = 0

    # –¶–∏–∫–ª —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–∫–∞:
    # 1. –ú—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ª–∏–º–∏—Ç API-–∑–∞–ø—Ä–æ—Å–æ–≤ (max_requests).
    # 2. –í –æ—á–µ—Ä–µ–¥–∏ –µ—Å—Ç—å —Ñ—Ä–∞–∑—ã, –æ–∂–∏–¥–∞—é—â–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.
    while done_requests < max_requests and query_queue:
        # –ë–µ—Ä–µ–º —Ñ—Ä–∞–∑—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        current_phrase = query_queue.pop(0)
        queue_set.discard(current_phrase)

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —Ñ—Ä–∞–∑–∞ —É–∂–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ (–≤–∞–∂–Ω–æ –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
        status_check = conn.execute("SELECT status FROM queue WHERE phrase = ?", (current_phrase,)).fetchone()
        if status_check and status_check[0] == 'PROCESSED':
            continue

        # 1. –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API.
        # –í –æ—Ç–≤–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ 'wordstat' –¥–æ 2000 —Ñ—Ä–∞–∑.
        wordstat = fetch_wordstat(current_phrase, region, TOKEN, no_region=no_region)
        done_requests += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ API-–∑–∞–ø—Ä–æ—Å–æ–≤

        # 2. –õ–æ–≥–∏–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –æ—à–∏–±–æ–∫ (429/503)
        if not wordstat:
            consecutive_errors += 1

            if consecutive_errors >= MAX_ERRORS:
                st.error(f"‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ ({MAX_ERRORS}). –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
                break

                # –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—Ä–∞–∑—É –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
            st.warning(
                f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API. –§—Ä–∞–∑–∞ '{current_phrase}' –æ—Å—Ç–∞–ª–∞—Å—å –≤ PENDING. –°—á–µ—Ç: {consecutive_errors}/{MAX_ERRORS}. –û–∂–∏–¥–∞–Ω–∏–µ...")
            query_queue.append(current_phrase)
            queue_set.add(current_phrase)
            time.sleep(5)
            continue

        else:
            consecutive_errors = 0

            # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏
            # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –í–°–ï –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç API —Ñ—Ä–∞–∑—ã (–º–∞–∫—Å. 2000)
            for item in wordstat:
                p = item["phrase"]
                c = item["count"]

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –∫–∞–∫ PENDING
                insert_result_and_queue(conn, p, c, is_processed=False)

                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—É—é –æ—á–µ—Ä–µ–¥—å, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ—Ä–∞–∑–∞ –µ—â–µ –Ω–µ —Ç–∞–º
                if p not in queue_set:
                    query_queue.append(p)
                    queue_set.add(p)

            # 4. –°–û–•–†–ê–ù–ï–ù–ò–ï –ü–û–ó–ò–¶–ò–ò: –ü–æ–º–µ—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ñ—Ä–∞–∑—É –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—É—é
            update_queue_status(conn, current_phrase, 'PROCESSED')
            conn.commit()
            if remaining_quota is not None and remaining_quota > 0:
                remaining_quota -= 1
                quota_placeholder.metric(label="–û—Å—Ç–∞—Ç–æ–∫ –¥–Ω–µ–≤–Ω–æ–π –∫–≤–æ—Ç—ã", value=f"{remaining_quota} –∑–∞–ø—Ä–æ—Å–æ–≤")

            # 5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ ETA
        total_phrases = get_db_phrase_count(conn)
        elapsed = time.time() - start_time
        avg_time = elapsed / done_requests
        eta = avg_time * (max_requests - done_requests) if done_requests < max_requests else 0

        progress.progress(done_requests / max_requests)
        status.text(
            f"–ó–∞–ø—Ä–æ—Å {done_requests}/{max_requests} | –§—Ä–∞–∑: {total_phrases} | –û—Å—Ç–∞–ª–æ—Å—å ~ {eta:.1f} —Å–µ–∫ ")

        # 6. –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ (–¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è QPS)
        time.sleep(0.15)

        # 3. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    df = get_all_results_df(conn)
    conn.close()

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–µ—Å—Å–∏—é
    st.session_state["df"] = df
    st.session_state["db_name"] = db_name

    # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if done_requests == max_requests:
        st.success(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ ({max_requests}) –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –°–æ–±—Ä–∞–Ω–æ {len(df)} —Ñ—Ä–∞–∑.")
    elif consecutive_errors >= MAX_ERRORS:
        st.warning(f"‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑-–∑–∞ –ª–∏–º–∏—Ç–∞ API. –°–æ–±—Ä–∞–Ω–æ {len(df)} —Ñ—Ä–∞–∑. –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç–µ –ø–æ–∑–∂–µ.")
    elif not query_queue:
        st.success(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω! –í—Å—è –æ—á–µ—Ä–µ–¥—å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞. –°–æ–±—Ä–∞–Ω–æ {len(df)} —Ñ—Ä–∞–∑.")
    else:
        st.success(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –°–æ–±—Ä–∞–Ω–æ {len(df)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ñ—Ä–∞–∑.")

# -------------------
# –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã (–≤—Å–µ–≥–¥–∞ –æ–¥–Ω–∞, –∏–∑ —Å–µ—Å—Å–∏–∏)
# -------------------
if "df" in st.session_state and not st.session_state["df"].empty:
    render_results(st.session_state["df"], st.session_state["db_name"])
elif "current_db" in st.session_state and os.path.exists(st.session_state["current_db"]):
    try:
        conn = setup_db(st.session_state["current_db"])
        df = get_all_results_df(conn)
        conn.close()
        if not df.empty:
            st.session_state["df"] = df
            st.session_state["db_name"] = st.session_state["current_db"]
            render_results(st.session_state["df"], st.session_state["db_name"])
        else:
            st.info(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {st.session_state['current_db']} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –ø—É—Å—Ç–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥.")
    except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite ({st.session_state['current_db']}): {e}")